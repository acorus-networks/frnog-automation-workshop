
data_sources: # --------------------------------------------------------
  NetboxLab:
    type: netbox_api
    args:
      url: http://ks01.commit.ninja:32776/
      token: 0123456789abcdef0123456789abcdef01234567

data_sets: # --------------------------------------------------------
  - name: providers
    from: source
    args:
      name: NetboxLab
      app: circuits
      type: providers

  - name: site_info
    from: source
    args:
      name: NetboxLab
      app: dcim
      type: sites

  - name: nb_devices
    from: source
    args:
      name: NetboxLab
      app: dcim
      type: devices

  - name: nb_circuits
    from: source
    args:
      name: NetboxLab
      app: circuits
      type: circuits
      filters:
        - type: transit

  - name: final_circuits
    from: decoration
    args:
      main:
        name: nb_circuits
        pivot: .provider.id
        exclusive: False
      decorators:
        - name: providers
          pivot: .id
          anchor: provider

  - name: nb_interfaces
    from: source
    args:
      name: NetboxLab
      app: dcim
      type: interfaces

  - name: nb_ips
    from: source
    args:
      name: NetboxLab
      app: ipam
      type: ip-addresses

  - name: full_interfaces
    from: decoration
    args:
      main:
        name: nb_interfaces
        pivot: .id
      decorators:
        - name: final_circuits
          pivot: .termination_a.connected_endpoint.id
          anchor: circuits
        - name: nb_ips
          pivot: .interface.id
          anchor: ip

  - name: decorated_devices
    from: decoration
    args:
      main:
        name: nb_devices
        pivot: .id
      decorators:
        - name: full_interfaces
          pivot: .device.id
          anchor: interfaces

  - name: final_devices
    from: filtering
    args:
      name: decorated_devices
      filter: '[. as $all | .[] | setpath(["all_peers"]; $all)]'

  - name: full_site_info
    from: filtering
    args:
      name: site_info
      filter: ".[0] | {local: {asn: .asn, physical_address: .physical_address}}"

render: # --------------------------------------------------------
  elements:
    - name: final_devices
      args:
        index:
          value: .name
        group_by:
          - value: .device_type.manufacturer.name
        host_vars:
          igp: '{
            loopbacks: {
              ipv4: .primary_ip4.address | split("/") | {local_ip: .[0], netmask: .[1]},
              ipv6: .primary_ip6.address | split("/") | {local_ip: .[0], netmask: .[1]},
            },
            neighbors: [
              .interfaces[] | select(.connected_endpoint.device.name != null) | {
                interface: .name,
                peer: .connected_endpoint.device.name,
                ipv4:  [.ip[] | select(.family.value == 4) ][0] | .address | split("/") | {local_ip: .[0], netmask: .[1]},
                ipv6:  [.ip[] | select(.family.value == 6) ][0] | .address | split("/") | {local_ip: .[0], netmask: .[1]}
              }
            ]
          }'
          ibgp_peers: '. as $root | [ .all_peers[] | select($root.name != .name) | {
            name: .name,
            ipv4: .primary_ip4.address | split("/")[0],
            ipv6: .primary_ip6.address | split("/")[0]
          }]'

          transit_interfaces: '[
            .interfaces[] | select(.tags | index("transit")) | {
              name: .name,
              peer_name: .circuits[0].provider[0].name,
              cid: .circuits[0].cid,
              ipv4: [.ip[] | select(.family.value == 4) ][0] | {
                local_ip: .address | split("/") | .[0],
                netmask: .address | split("/") | .[1],
                peer_ip: null
              },
              ipv6: [.ip[] | select(.family.value == 6) ][0] | {
                local_ip: .address | split("/") | .[0],
                netmask: .address | split("/") | .[1],
                peer_ip: null
              }
            }
          ]'
          transit_sessions: '[
            .interfaces[] | select(.tags | index("transit")) | {
              name: .circuits[0].provider[0].name,
              peer_asn: .circuits[0].provider[0].asn,
              ipv4: [.ip[] | select(.family.value == 4) ][0] | {
                local_ip: .address | split("/") | .[0],
                netmask: .address | split("/") | .[1],
                peer_ip: null
              },
              ipv6: [.ip[] | select(.family.value == 6) ][0] | {
                local_ip: .address | split("/") | .[0],
                netmask: .address | split("/") | .[1],
                peer_ip: null
              }
            }
          ]'
  group_vars:
    - group: final_devices
      set: full_site_info
  group_hierarchy:
    final_devices:
      arista:
      juniper:

transform:
  - module: peer_enrichment
    func: add_peer_ip